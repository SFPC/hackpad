A Firm Memory Stack
parallel memoir with A Firm Project Stack

 * Sunday April 20
6 : make a process or sculpture about physical memory.
first assignment from Tega 
collaborated with Ida, Shobun

http://instagram.com/p/nBf0fUNH58/
*

 * Monday April 21
questions
in zach's class
*


8-bit binary typing tutor
'teaching binary'  in-class assignment from Zach
collaborated/in conjunction with Hiro
inspired from patatap.com
*

*

a new language proposition
'from

what kind of sorcery is happening in this if statement?
*

two operators are helpful to understand here: >> is a bit shift operator.   You can take a number (in binary) like

 * 10010 >> 1 = 1001 
 * 10010 << 1 = 100100

it's kind of like a divide or multiply by two (in a primitive sense without rounding, floating point numbers, etc....   1011 (11) >> 1 = 101 (5), for example)

The second operator is &, which is an and operator.  It returns true if both bits are true. 
http://www.ee.surrey.ac.uk/Projects/CAL/digital-logic/gatesfunc/index.html#andgate

 * 0 & 0 = 0
 * 1 & 0 = 0
 * 0 & 1 = 0
 * 1 & 1 = 1

So this code is, in a for loop, shifting the number down.  The 7-i is because we are drawing from right to left, so we want to look from the top most bit when i = 0.    We are shifting down to different directions, ie, 

 * 10010111 is being checked as
 * 10010111  >> 7 = 1
 * 10010111  >> 6 = 10
 * 10010111  >> 5 = 100
 * 10010111  >> 4 = 1001
 * 10010111  >> 3 = 10010
 * 10010111  >> 2 = 100101
 * 10010111  >> 1 = 1001011
 * 10010111  >> 0= 10010111

then, we see if the last bit = 1, by & with 1 (0x01 is a way of writing 1 in hex)

 * 1 & 0x01 = 1
 * 10 & 0x01 = 0
 * 100 & 0x01 = 0
 * 1001 & 0x01 = 1
 * ... etc

hope this helps!

indeed! thank you!
also this link also super helpful 
http://stackoverflow.com/questions/47981/how-do-you-set-clear-and-toggle-a-single-bit-in-c-c




 * Tuesday
Coding language assignment from Zach

first iteration 
PercussiveDraw
http://tothong.com/files/Movie%20on%204-21-14%20at%209.23%20PM.mov
*

BalloonDraw
a lot of thought process on thinking about inside 
https://github.com/firmread/firm_sfpc/tree/master/blowUpShapes
<< using simple OF app that talk to arduino through standard firmata


*
*

 * Wednesday

Negation constraint
 * my output
constraint from Alexander Porter 
*
I just changed my number so here's what i got... 

*

searching on google, without quotes i got: 

 * Youtube
 * Loading...
 * Are you sure you want to remove the "Watch it again" section?



*



,,, with quote I got:

 * "And you are lynching Negroes"


*

 * my instruction to Nathan Koch
"Blindly, Randomly, type one letter on the keyboard from one foot away, complete the word, repeat"

This is what come out 
 * gsjllj ggghygmvv kkkkubufn ffyfhhghg jjjkjjkkuyghgd vvnnb,mb. ggthff kjikgmgk lhhgf hf hhhj ;ykd jfmnc li,jg ccv kjkjoyr jhjhjh. liklkh fgfkda hesyrydhdcv. ajfdlll; jirnvigtmlou jjyjuolklhjf.
 *  
 * siqmdoe,jui. kuwplandhwuooihy. wxxxtkdpw. sowncvhdwi. wwiwmsha. ijmncwod,i/ powmcjuwom/ wwwwjwpcpm;wow[s.

It have a nice phonic rhythm to it when computer read it, a lot of 'misspell'




 * write in other languages
as I've never done any text adventure before,,,

sfpc text adventure
Scratch 
*
here goes one the most misused way to use scratch
http://scratch.mit.edu/projects/

 * Python
developing....


other languages that i like
 * whitespace http://en.wikipedia.org/wiki/Whitespace_(programming_language)
 * shakespeare http://en.wikipedia.org/wiki/Shakespeare_(programming_language)
 * Chef http://en.wikipedia.org/wiki/Chef_(programming_language)#Chef
 * http://en.wikipedia.org/wiki/Octave_(language)


 * Thursday
Drawings and circuit
*

*

 * Friday
Drawings and circuit part 2
*

Hiro teach me Serialport > node server > client stuffs 
code is on the wall
*

 * Assignments (propositions) // buffer // pre-project stack
 * Jonathan's Combining two pieces of data
 * Zach's Tuesday assignment
   * a) create tools / systems / scenarios for writing and reading code not on the screen.  
   * are there better systems you can develop for working with code?   For identifying questions and understanding?
   * b) tell a story using variable names.  you code should compile, but also be interesting and evocative to read as text. focus on code as text, can you play with this?  
   * Look at poems by apollinaire.   outrageous examples can be found in the obfuscated code contest (http://www.ioccc.org/2000/bmeyer.c) and also in ishac's code poems:
   * http://www.creativeapplications.net/processing/code-poems-by-ishac-bertran-poetry-with-code/ 
   * (there should be a copy at school)
   * c) feel comfortable with scope and variables and arrays.   make some sketches.  
   * d) read some code that's out of your comfort level, generate a bunch of question about it. 
   * e) play with memory in weird ways - make programs that crash.
 * >>> memories and name project
 * explore more languages
 * make one thing out of what Hiro taught me,, arduino - node - browser
 * poem/game out of 'the dawn' poem
   * 
 * At Dawn
 * 
 * In my dream the head of a child was in the center.
 * 
 * If the clouds gather on your roof and the rain spares you, will you keep the secret of this double miracle?
 * 
 * But no voice calls you. If you get up, barefoot, you'll get sick. Where would you go, anyway, across these ravines of light.
 * 
 * The quilts keep the silence. Legs folded under, he walks on his wings and goes out. He was an angel and the whiter morning that was rising.
 * 
 * node libs cross using from what Jonathan taught in the session today


