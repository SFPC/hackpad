Web browser in oF
There are several ways to communicate with web from openFrameworks. One of the most radical way is having a browser itself inside oF application. It means you can make communications between C++ and Javascript inside openFrameworks.

It doesn't so make sense if you simply create an application with Javascript instead of C++ but it can be useful when you want to combine oF with a web-based application which already exists for some specific purposes such as:
 * to control Arduino from nodejs on heroku server via openFrameworks ( but if you want to directly communicate with nodejs, maybe this is simpler)
 * to access web-API with Javascript libraries while using an hardware interface which cannot be handled by a browser

----

Set up

1. Get Awesomium
Awesomium is a Chromium-powered HTML UI engine which can be used when you want to make a browser application in C++ or .NET application.
To use in openFrameworks, you need at first download Awesomium and install it. You can use it for free unless you get more than $100k revenue.


2. Get ofxAwesomium addon
There are several ofxAddons for Awesomium but I used ofxAwesomium You need to do a little setup as described in README.md on the github.
When I manually import the addon, your addons directory in XCode looks like this:

*

You need to get and place Awesomium.framework from /Library/Frameworks/Awesomium.framework .

----

How to use
You can check examples in addons at first. And here are things I needed to figure out from outside of the examples.


Sample code:
https://github.com/yukiy/browser-in-OF-basic


a.Read html/js/css files

 * Open a webpage.
 * void testApp::setup(){
 *     browser.setup(ofGetWidth(), ofGetHeight());
 *     browser.loadURL("http://www.google.com");
 * }


 * Load local html files.
 * void testApp::setup(){
 *     browser.setup(ofGetWidth(), ofGetHeight());  
 *     browser.loadURL("file:///Workspaces/openFrameworks/of_v0.8.4_osx_release/apps/SFPC/browser/bin/data/www/test.html");  
 * }


 * or you can directly write HTML here.
 * void testApp::setup(){
 *     browser.setup(ofGetWidth(), ofGetHeight());
 *     browser.loadURL("data:text/html,<h1>Hello World</h1>");
 * }

---

b. Excute Javascript from openFrameworks

 * When I press a key, change bgColor of HTML.
 * void testApp::keyPressed(int key){
 *     browser.keyPressed(key);
 *     browser.doJavaScript("document.body.bgColor = '#FF0000';");
 * }

 * And also you can load JS file with ofBuffer.
 * void testApp::keyPressed(int key){  
 *     browser.keyPressed(key);  
 *     ofBuffer buffer = ofBufferFromFile("www/test.js");  
 *     browser.doJavaScript(buffer);  
 * }  

---

c. Access variables in Javascript from openFrameworks

 * If I want to get a global variable called “g_data” in javascript.
 * void testApp::mousePressed(int x, int y, int button){
 *     browser.mousePressed(x, y, button);
 *     JSValue data = browser.doJavaScript("g_data");
 *     cout << data.ToString() << endl;
 * }

For more methods:
http://wiki.awesomium.com/general-use/introduction-to-javascript-integration.html
↑this is for native C++, so good to see "src/ofxAwesomium.cpp" too.


 * Also, there's CEF (another chrome project) and webkit -- for webkit, see https://github.com/admsyn/FITC-2014-slides/blob/master/src/ofxPresent/src/ofxPresentApp%2BCocoa.mm for osx code to put html content on the screen. (it's literally on the screen, not in a texture).  I don't have good luck with CEF to texture, but the CEF window system works well.  Finally, you can use the CEF syphon client to put a web page into OF via syphon.
 * Also -- see things like this https://code.google.com/p/oflivecoding/ that use javascript interpreter but not a browser to open up live coding to OF -- it's javascript based






